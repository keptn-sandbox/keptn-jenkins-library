name: Create Release
on:
  workflow_dispatch:
env:
  NODE_VERSION: 14
  RELEASE_NOTES_FILE: "RELEASE-BODY.md"
defaults:
  run:
    shell: bash
jobs:
  test:
    strategy:
      matrix:
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.3.4
      - name: Run tests
        run: echo "No tests configured yet"

  release:
    name: "Release"
    runs-on: ubuntu-20.04
    needs: [test]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configure Git # Using github.actor - whoever starts the pre-release workflow will own the tag
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Prepare GitHub Release Notes
        run: |
          # Delete pre-release tags to be able to generate a changelog from last 'real' release LOCALLY
          # This is a workaround for a known limitation of standard-version
          # Reference: https://github.com/conventional-changelog/standard-version/issues/203#issuecomment-872415140
          git tag -l | grep -vE '^v(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)$' | xargs git tag -d

          # generate release notes into RELEASE_NOTES_FILE
          npx standard-version@^9.3.1 -i "${{ env.RELEASE_NOTES_FILE }}" --skip.commit --skip.tag --header ""          

      - name: Create release package
        id: create-release-package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üöÄ Creating release package now..."
          # this will generate a commit and a tag
          npx standard-version@^9.3.1

          echo "::set-output name=tag-name::$(git describe --tags --abbrev=0)"

      - name: Push changes to repo
        id: push-changes
        env:
          RELEASE_TAG: ${{ steps.create-release-package.outputs.tag-name }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Fetching previously deleted old tags..."
          git fetch origin --tags -f
          # check out a temporary branch
          git checkout -b patch/release-notes-$RELEASE_TAG
          echo "‚ö°Ô∏è Pushing changes to remote repository..."
          git push --follow-tags


      - name: Create GitHub Pull Request for release notes
        env:
          RELEASE_TAG: ${{ steps.create-release-package.outputs.tag-name }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create "$RELEASE_TAG" --title "chore: Release notes for $RELEASE_TAG" --body "*This is an automated PR for release notes of $RELEASE_TAG!**"


      - name: Create GitHub Release
        env:
          RELEASE_TAG: ${{ steps.create-release-package.outputs.tag-name }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "$RELEASE_TAG" --draft --notes-file "${{ env.RELEASE_NOTES_FILE }}" --title "$RELEASE_TAG"
